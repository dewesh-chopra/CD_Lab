ques1

%{
#include<stdio.h>
int lineno = 0;
%}
%option noyywrap
digit [0-9]
%%
"(" {return LB;}
")" {return RB;}
\% {return MOD;}
\+ {return PLUS;}
\- {return SUB;}
"*" {return MULT;}
"/" {return DIV;}
{digit}+ {yylval = atoi(yytext); return NUMBER;}
[\n] {++lineno; return LINE;}
. {return ERROR;}
%%

%{
extern int lineno;
%}
%token PLUS SUB MULT DIV MOD LB RB NUMBER LINE ERROR T
%left MOD
%left DIV MULT
%left PLUS SUB
%%
S:E LINE {printf("Result: %d\n", $1);}
;
E:E PLUS E {$$ = $1 + $3;}
| E SUB E {$$ = $1 - $3;}
| T DIV E {$$ = $1 / $3;}
| E MULT E {$$ = $1 * $3;}
| E MOD E {$$ = $1 % $3;}
| NUMBER {$$ = $1;}
;
%%
#include"lex.yy.c"
int yyerror() {
    printf("An ERROR was encountered at LINE %d\n", lineno);
}
int main() {
    printf("Enter the expression: ");
    yyparse();
    return 0;
}

ques2


#include<stdio.h>
int lineno = 0;
%}
%option noyywrap
digit [0-9]
%%
digit+"/0" {return DIV_BY_ZERO;};
"(" {return LB;}
")" {return RB;}
\% {return MOD;}
\+ {return PLUS;}
\- {return SUB;}
"*" {return MULT;}
"/" {return DIV;}
{digit}+ {yylval = atoi(yytext); return NUMBER;}
[\n] {++lineno; return LINE;}
. {return ERROR;}
%%

%left MOD
%left DIV MULT
%left PLUS SUB
%%
S:E LINE {printf("Result: %d\n", $1);}
;
E:E PLUS T {$$ = $1 + $3;}
| E SUB T {$$ = $1 - $3;}
| T {$$ = $1;}
;
T:T MULT F {$$ = $1 * $3;}
| T DIV F {
    if($3 == 0) {
        printf("ERROR: Divide by zero!\n");
        exit(0);
    } else {
        $$ = $1 / $3;
        printf("Value = %d\n", $$);
    }
}
| F {$$ = $1;}
;
F:F MOD G {
    if($3 == 0) {
        printf("ERROR: MOD by zero\n");
        exit(0);
    } else {
        $$ = $1 % $3;
    }
}
| G {$$ = $1;}
;
G:LB G RB {$$ = $2;}
| H {$$ = $1;}
;
H:NUMBER {$$ = $1;}
;
%%
#include"lex.yy.c"
int yyerror() {
    printf("An ERROR was encountered at LINE %d\n", lineno);
}
