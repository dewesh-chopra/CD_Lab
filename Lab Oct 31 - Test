Lex file

%{
#include<stdio.h>
%}
%option noyywrap
%%
signed|unsigned { return sg; }
int|short|long|char|float|double|"short int"|"long int"|"long double"|"long long" return kw;
[a-zA-Z_][a-zA-Z_0-9]* return id;
[+/-]*[0-9]+(\.[0-9]*)? return num;
"," { return cm; }
";" { return sc; }
"=" { return eq; }
\t return tb;
[ \t]+ { }
. return yytext[0];
\n return 0;
%%


Yacc file

%{
#include<stdio.h>
int valid = 1;
%}
%token sg kw num id tb sc cm eq
%%
start : kwrd  L sc
| kwrd L sc start
;
kwrd : sg kw
| kw
;
L : L cm  t
| t
;
t : id
| id "[" num "]"
| id eq num
;
%%
int yyerror() {
    valid = 0;
    printf("Invalid Expression\n");
    return 0;
}
#include "lex.yy.c"
int main() {
    yydebug = 1;
    printf("Enter the expression:\n ");
    yyparse();
    if(valid) {
        printf("Valid Expression\n");
    }
}

